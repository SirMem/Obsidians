<?xml version="1.0" encoding="UTF-8"?><xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve"><fields/><annots><square page="75" rect="118.670,476.440,491.540,684.790" color="#E44234" flags="print" name="3f7f4647-154f-5e47-e4be-70123a63ca3c" title="Guest" subject="矩形" date="D:20240317153431+08'00'" creationdate="D:20240317153430+08'00'"/><square page="212" rect="114.350,357.120,495.710,566.960" color="#E44234" flags="print" name="e25c3d66-77f9-cdd3-7aa3-5aedf3c746d1" title="Guest" subject="矩形" date="D:20240317200424+08'00'" creationdate="D:20240317200422+08'00'"/><square page="213" rect="70.550,178.300,542.540,717.800" color="#E44234" flags="print" name="8e681b76-cead-bb24-50f1-d204f1fdcf48" title="Guest" subject="矩形" date="D:20240317200453+08'00'" creationdate="D:20240317200445+08'00'"/><square page="212" rect="60.820,142.410,549.230,307.850" color="#E44234" flags="print" name="f68255eb-f38d-ec41-1d65-50decfb59135" title="Guest" subject="矩形" date="D:20240317200530+08'00'" creationdate="D:20240317200528+08'00'"/><square page="215" rect="122.250,366.240,494.490,575.470" color="#E44234" flags="print" name="1e86e6b5-8af6-f9fb-b22b-9f3145b8204d" title="Guest" subject="矩形" date="D:20240317201143+08'00'" creationdate="D:20240317201140+08'00'"/><square page="216" rect="121.040,310.280,490.230,520.120" color="#E44234" flags="print" name="567494a7-d982-0637-3bec-28fddb73591a" title="Guest" subject="矩形" date="D:20240317201915+08'00'" creationdate="D:20240317201913+08'00'"/><square page="218" rect="161.180,543.240,453.740,685.560" color="#E44234" flags="print" name="219c56a8-80d3-1d29-3339-5c9d39a1b70b" title="Guest" subject="矩形" date="D:20240317202933+08'00'" creationdate="D:20240317202932+08'00'"/><square page="218" rect="69.950,147.890,537.670,279.870" color="#E44234" flags="print" name="aae3aabb-e15c-7859-2c86-4f5c6e394c7c" title="Guest" subject="矩形" date="D:20240317203458+08'00'" creationdate="D:20240317203456+08'00'"/><square page="219" rect="70.550,315.760,542.540,718.400" color="#E44234" flags="print" name="0775f6ca-1ceb-a9a6-cc3e-287962757144" title="Guest" subject="矩形" date="D:20240317203509+08'00'" creationdate="D:20240317203505+08'00'"/><square page="221" rect="125.900,173.430,492.660,367.460" color="#E44234" flags="print" name="a4068b6b-47b5-0bc9-1352-55372b95a4ce" title="Guest" subject="矩形" date="D:20240317204648+08'00'" creationdate="D:20240317204646+08'00'"/><square page="222" rect="138.070,171.610,491.450,357.120" color="#E44234" flags="print" name="ca491a44-f595-b5fd-e9af-37f7434c88a6" title="Guest" subject="矩形" date="D:20240317205214+08'00'" creationdate="D:20240317205213+08'00'"/><square page="223" rect="220.690,291.740,395.360,472.350" color="#E44234" flags="print" name="e48199bb-a2bb-f7a2-d74b-9c760d0935ea" title="Guest" subject="矩形" date="D:20240317210523+08'00'" creationdate="D:20240317210522+08'00'"/><square page="224" rect="70.260,255.120,542.320,522.820" color="#E44234" flags="print" name="f2b8d299-edd4-196d-2b83-71be5baf2fa6" title="Guest" subject="矩形" date="D:20240317210920+08'00'" creationdate="D:20240317210917+08'00'"/><square page="226" rect="120.390,267.120,483.950,464.610" color="#E44234" flags="print" name="f2863e3d-cd7d-903a-4cf4-fe0defa50d3f" title="Guest" subject="矩形" date="D:20240318082812+08'00'" creationdate="D:20240318082811+08'00'"/><square page="226" rect="66.620,36.330,544.860,139.120" color="#E44234" flags="print" name="a68080ff-bdb2-6707-a6a5-dd14eb12aeae" title="Guest" subject="矩形" date="D:20240318082944+08'00'" creationdate="D:20240318082942+08'00'"/><square page="227" rect="71.380,603.080,544.860,715.860" color="#E44234" flags="print" name="f15e306a-e78a-9b68-73fe-5b2762500399" title="Guest" subject="矩形" date="D:20240318082955+08'00'" creationdate="D:20240318082954+08'00'"/><square page="232" rect="72.250,181.860,542.910,716.410" color="#007A3B" flags="print" name="3f8e0ff4-7691-4407-79b6-9b4f80ba9b1c" title="Guest" subject="矩形" date="D:20240318144700+08'00'" creationdate="D:20240318144655+08'00'"/><square page="233" rect="70.580,451.220,538.730,715.160" color="#007A3B" flags="print" name="06204643-9c2f-e681-88d7-c6fe91f24ba7" title="Guest" subject="矩形" date="D:20240318144710+08'00'" creationdate="D:20240318144702+08'00'"/><square page="234" rect="192.140,466.150,434.800,645.910" color="#007A3B" flags="print" name="e85c7ae3-903c-4440-cab6-1dfc4cf2a909" title="Guest" subject="矩形" date="D:20240318150606+08'00'" creationdate="D:20240318150604+08'00'"/><square page="234" rect="69.720,135.610,541.100,267.530" color="#007A3B" flags="print" name="dfe88059-eeca-e9d9-040a-ded67222a189" title="Guest" subject="矩形" date="D:20240318151348+08'00'" creationdate="D:20240318151347+08'00'"/><square page="235" rect="70.790,317.400,538.950,715.850" color="#007A3B" flags="print" name="073503f5-2603-b6c7-73a4-338709f0e042" title="Guest" subject="矩形" date="D:20240318151403+08'00'" creationdate="D:20240318151400+08'00'"/><square page="236" rect="119.050,509.920,488.010,714.240" color="#007A3B" flags="print" name="8d36a344-31a2-e9e9-1543-cca782ef7901" title="Guest" subject="矩形" date="D:20240318151520+08'00'" creationdate="D:20240318151517+08'00'"/><square page="238" rect="122.870,522.920,485.990,713.400" color="#007A3B" flags="print" name="0d95f8df-83b3-c22f-5ba1-577540a9a5b8" title="Guest" subject="矩形" date="D:20240318160906+08'00'" creationdate="D:20240318160905+08'00'"/><square page="238" rect="181.910,107.650,486.190,313.930" color="#007A3B" flags="print" name="837b8f46-c8c4-6003-e9c8-615572023b60" title="Guest" subject="矩形" date="D:20240318203148+08'00'" creationdate="D:20240318203145+08'00'"/><square page="240" rect="69.120,163.720,540.450,561.790" color="#007A3B" flags="print" name="e3c97ae7-cf27-ba2a-0b25-5788d33cdd00" title="Guest" subject="矩形" date="D:20240318204913+08'00'" creationdate="D:20240318204910+08'00'"/><square page="241" rect="70.670,448.500,540.970,716.650" color="#007A3B" flags="print" name="fe6f9308-9cee-6156-9cd3-d6990ab14d38" title="Guest" subject="矩形" date="D:20240318204920+08'00'" creationdate="D:20240318204916+08'00'"/><underline page="240" rect="224.540,668.547,314.283,689.176" color="#A6A1E6" flags="print" name="37df7aba-bde9-6ff4-3f97-4f46c1967d13" title="Guest" subject="下划线" date="D:20240318205029+08'00'" creationdate="D:20240318205029+08'00'" coords="224.53953320000008,689.1763434,314.28259021904313,689.1763434,224.53953320000008,668.54660078125,314.28259021904313,668.54660078125"><contents>分治策略的排序算法</contents></underline><square page="242" rect="122.120,262.460,493.680,473.450" color="#007A3B" flags="print" name="dfeb59b3-b319-18db-77c0-c0930ae832a9" title="Guest" subject="矩形" date="D:20240318211206+08'00'" creationdate="D:20240318211205+08'00'"/><square page="245" rect="125.450,161.150,492.270,357.690" color="#007A3B" flags="print" name="bd812008-faf7-17f1-c0ac-357cdfadc0e0" title="Guest" subject="矩形" date="D:20240319144116+08'00'" creationdate="D:20240319144109+08'00'"/><square page="246" rect="73.370,100.920,541.630,633.040" color="#007A3B" flags="print" name="1b2aa471-64f6-3a5e-74af-1e289afbe48f" title="Guest" subject="矩形" date="D:20240319144347+08'00'" creationdate="D:20240319144338+08'00'"/><square page="247" rect="71.100,582.770,541.630,715.460" color="#007A3B" flags="print" name="8ff89af0-e5b7-18d1-18da-2d5d113d3f4f" title="Guest" subject="矩形" date="D:20240319144425+08'00'" creationdate="D:20240319144424+08'00'"/><square page="249" rect="75.510,120.970,538.540,385.500" color="#007A3B" flags="print" name="969eb4da-cd1a-d19e-31ca-8748637b8402" title="Guest" subject="矩形" date="D:20240320104428+08'00'" creationdate="D:20240320103735+08'00'"/><square page="250" rect="72.500,184.840,540.710,716.480" color="#007A3B" flags="print" name="cfb8199c-f118-53ae-8c6d-2e41ca7e1f72" title="Guest" subject="矩形" date="D:20240320103748+08'00'" creationdate="D:20240320103745+08'00'"/><square page="252" rect="125.140,221.520,482.450,379.890" color="#007A3B" flags="print" name="043ad60e-60b9-a84c-784f-4132a5f779af" title="Guest" subject="矩形" date="D:20240320110331+08'00'" creationdate="D:20240320110329+08'00'"/><square page="254" rect="127.730,522.290,484.610,708.710" color="#007A3B" flags="print" name="5d6a3dab-a5be-8ee8-df5c-acba08d2ac4f" title="Guest" subject="矩形" date="D:20240320110709+08'00'" creationdate="D:20240320110708+08'00'"/><square page="255" rect="124.280,374.280,487.200,543.870" color="#007A3B" flags="print" name="55007b4e-124a-b920-4167-7863ced57a94" title="Guest" subject="矩形" date="D:20240320111708+08'00'" creationdate="D:20240320111707+08'00'"/><square page="256" rect="71.630,62.710,539.410,193.040" color="#007A3B" flags="print" name="026e2389-a541-fe48-450f-eb6be1127a15" title="Guest" subject="矩形" date="D:20240320114327+08'00'" creationdate="D:20240320114323+08'00'"/><square page="257" rect="71.200,318.610,538.550,714.320" color="#007A3B" flags="print" name="ea8f9e82-12b5-8e15-7514-cad252f530c1" title="Guest" subject="矩形" date="D:20240320114336+08'00'" creationdate="D:20240320114332+08'00'"/><square page="262" rect="120.020,506.790,490.190,715.810" color="#007A3B" flags="print" name="536b379c-540e-da74-5ddb-a5faa0eeb013" title="Guest" subject="矩形" date="D:20240320210042+08'00'" creationdate="D:20240320210041+08'00'"/><underline page="266" rect="70.866,624.872,546.640,660.445" color="#A6A1E6" flags="print" name="1e91a002-3308-3a4e-63b6-7a5a0f73d1d5" title="Guest" subject="下划线" date="D:20240320211553+08'00'" creationdate="D:20240320211553+08'00'" coords="441.16943899999995,660.4453434,541.1242047999999,660.4453434,441.16943899999995,639.8156007812499,541.1242047999999,639.8156007812499,70.86599999999999,645.5013434,546.6399256000004,645.5013434,70.86599999999999,624.87160078125,546.6399256000004,624.87160078125"><contents>，将大问题分解为多个
子问题、解决子问题、将子问题的解合并为原问题的解，这几步的效率为什么比直接解决原问题的效率更高？</contents></underline><underline page="267" rect="112.591,198.737,180.491,221.450" color="#A6A1E6" flags="print" name="071fce8a-6aef-9047-c24d-889fb3b1046a" title="Guest" subject="下划线" date="D:20240320211729+08'00'" creationdate="D:20240320211729+08'00'" coords="112.5906729,221.44996019999996,180.4908729,221.44996019999996,112.5906729,198.7369178186035,180.4908729,198.7369178186035"><contents>分治常见应用</contents></underline><underline page="289" rect="248.102,702.895,403.618,723.524" color="#A6A1E6" flags="print" name="a55c0b5c-5c4b-2638-5e6d-ee2470d1768e" title="Guest" subject="下划线" date="D:20240320213000+08'00'" creationdate="D:20240320213000+08'00'" coords="248.10188620000008,723.5243434,403.6180722000002,723.5243434,248.10188620000008,702.89460078125,403.6180722000002,702.89460078125"><contents>保留与删除 return 的搜索过程对比</contents></underline><underline page="290" rect="112.591,595.426,180.491,618.139" color="#A6A1E6" flags="print" name="811b140f-7180-f8ed-77e6-bf6000dfebfe" title="Guest" subject="下划线" date="D:20240320213018+08'00'" creationdate="D:20240320213018+08'00'" coords="112.5906729,618.1389602,180.4908729,618.1389602,112.5906729,595.4259178186035,180.4908729,595.4259178186035"><contents>回溯典型例题</contents></underline><underline page="355" rect="95.773,564.827,245.212,585.565" color="#A6A1E6" flags="print" name="ecdac3e6-325e-5d0f-371b-1be95737a5e6" title="Guest" subject="下划线" date="D:20240321084004+08'00'" creationdate="D:20240321084004+08'00'" coords="95.773,585.5653434,245.2120000000001,585.5653434,95.773,564.82663484375,245.2120000000001,564.82663484375"><contents>贪心算法不会重新考虑过去的决策</contents></underline><underline page="357" rect="80.829,208.313,524.165,243.994" color="#A6A1E6" flags="print" name="a3d6ee46-9df1-a520-42f2-48f3f034dee9" title="Guest" subject="下划线" date="D:20240321084232+08'00'" creationdate="D:20240321084232+08'00'" coords="80.82900000000001,243.99434340000005,524.1652000000004,243.99434340000005,80.82900000000001,223.25563484375004,524.1652000000004,223.25563484375004,80.82900000000001,229.05134340000006,324.9128000000002,229.05134340000006,80.82900000000001,208.31263484375006,324.9128000000002,208.31263484375006"><contents>‧ 贪心选择性质：只有当局部最优选择始终可以导致全局最优解时，贪心算法才能保证得到最优解。
‧ 最优子结构：原问题的最优解包含子问题的最优解。</contents></underline><underline page="358" rect="399.633,332.836,489.973,353.574" color="#A6A1E6" flags="print" name="06870acb-c140-8c85-594c-7c1e55180d2e" title="Guest" subject="下划线" date="D:20240321084343+08'00'" creationdate="D:20240321084343+08'00'" coords="399.63259999999997,353.5743434,489.9733886962891,353.5743434,399.63259999999997,332.83563484375,489.9733886962891,332.83563484375"><contents>反证法或数学归纳法</contents></underline><underline page="270" rect="70.866,453.790,203.583,479.945" color="#A6A1E6" flags="print" name="5824db73-7dce-7ed7-b953-5545e2576099" title="Guest" subject="下划线" date="D:20240321085702+08'00'" creationdate="D:20240321085702+08'00'" coords="70.866,479.94548000000003,203.58334,479.94548000000003,70.866,453.79040000000003,203.58334,453.79040000000003"><contents>12.3 构建二叉树问题</contents></underline><underline page="271" rect="80.829,613.231,548.823,723.524" color="#A6A1E6" flags="print" name="38500566-45ed-5a4e-3f65-0b2b392075f7" title="Guest" subject="下划线" date="D:20240321085714+08'00'" creationdate="D:20240321085714+08'00'" coords="80.82900000000001,723.5243434,541.1229844000006,723.5243434,80.82900000000001,702.89460078125,541.1229844000006,702.89460078125,95.773,708.5803434,541.1311077999999,708.5803434,95.773,687.95060078125,541.1311077999999,687.95060078125,95.773,693.6363434,419.55750000000023,693.6363434,95.773,673.00660078125,419.55750000000023,673.00660078125,80.82900000000001,678.6923434,541.1408704000003,678.6923434,80.82900000000001,658.06260078125,541.1408704000003,658.06260078125,95.773,663.7483434,364.7632000000002,663.7483434,95.773,643.11860078125,364.7632000000002,643.11860078125,80.82900000000001,648.8043434,548.8228350000003,648.8043434,80.82900000000001,628.17460078125,548.8228350000003,628.17460078125,95.773,633.8603434,175.47380000000004,633.8603434,95.773,613.23060078125,175.47380000000004,613.23060078125"><contents>‧ 问题可以被分解：从分治的角度切入，我们可以将原问题划分为两个子问题：构建左子树、构建右子
树，加上一步操作：初始化根节点。而对于每个子树（子问题），我们仍然可以复用以上划分方法，将
其划分为更小的子树（子问题），直至达到最小子问题（空子树）时终止。
‧ 子问题是独立的：左子树和右子树是相互独立的，它们之间没有交集。在构建左子树时，我们只需要关
注中序遍历和前序遍历中与左子树对应的部分。右子树同理。
‧ 子问题的解可以合并：一旦得到了左子树和右子树（子问题的解），我们就可以将它们链接到根节点上，
得到原问题的解。</contents></underline><underline page="272" rect="205.990,147.767,489.612,193.034" color="#A6A1E6" flags="print" name="bae0a27c-f6d2-6b94-911a-45663a96ee4d" title="Guest" subject="下划线" date="D:20240321085810+08'00'" creationdate="D:20240321085810+08'00'" coords="205.98960000000005,193.0337159999999,489.6120000000001,193.0337159999999,205.98960000000005,147.76672499999995,489.6120000000001,147.76672499999995"><contents>借助一个哈希表 hmap 来存储数组 inorder 中元素到索引的映射。</contents></underline><underline page="275" rect="243.287,388.298,383.445,433.565" color="#A6A1E6" flags="print" name="9c17b2f6-eea4-dfc2-fae5-caf28008fb1f" title="Guest" subject="下划线" date="D:20240321085837+08'00'" creationdate="D:20240321085837+08'00'" coords="243.28699999999998,433.56471600000003,383.4446,433.56471600000003,243.28699999999998,388.297725,383.4446,388.297725"><contents>因此总体空间复杂度为 𝑂(𝑛) 。</contents></underline><underline page="275" rect="70.866,343.321,176.423,369.476" color="#A6A1E6" flags="print" name="688148d9-2742-c261-d5c6-f7c3b7ef9a6a" title="Guest" subject="下划线" date="D:20240321085843+08'00'" creationdate="D:20240321085843+08'00'" coords="70.866,369.47648,176.42334,369.47648,70.866,343.3214,176.42334,343.3214"><contents>12.4 汉诺塔问题</contents></underline><square page="266" rect="60.560,55.940,545.580,587.750" color="#007A3B" flags="print" name="edacf652-f512-c06f-a0a8-6332aa021446" title="Guest" subject="矩形" date="D:20240321150627+08'00'" creationdate="D:20240321150623+08'00'"/><square page="269" rect="120.570,327.350,494.380,534.900" color="#007A3B" flags="print" name="cced5e6b-b052-0360-9538-d5f9d5f329d2" title="Guest" subject="矩形" date="D:20240321151135+08'00'" creationdate="D:20240321151134+08'00'"/><square page="270" rect="135.980,181.460,479.510,350.470" color="#007A3B" flags="print" name="d2231093-3acd-1adb-496a-baf893a0022c" title="Guest" subject="矩形" date="D:20240321152255+08'00'" creationdate="D:20240321151750+08'00'"/><square page="271" rect="122.770,169.350,491.070,366.990" color="#007A3B" flags="print" name="e218c65e-d267-1a33-8cee-1195b2aac914" title="Guest" subject="矩形" date="D:20240321154039+08'00'" creationdate="D:20240321154033+08'00'"/><square page="272" rect="58.910,202.380,581.910,603.170" color="#007A3B" flags="print" name="9c0c5f08-0ee5-16b7-9db6-20196dfda551" title="Guest" subject="矩形" date="D:20240321154240+08'00'" creationdate="D:20240321154239+08'00'"/><square page="273" rect="72.290,171.570,540.740,307.040" color="#007A3B" flags="print" name="632df89e-52e3-0ca7-c307-2be67a54e285" title="Guest" subject="矩形" date="D:20240321154541+08'00'" creationdate="D:20240321154537+08'00'"/><square page="274" rect="72.860,142.540,543.590,716.870" color="#007A3B" flags="print" name="1205b8dd-c39d-5853-688c-04727b1af077" title="Guest" subject="矩形" date="D:20240321154553+08'00'" creationdate="D:20240321154550+08'00'"/><square page="275" rect="119.530,519.920,492.360,715.730" color="#007A3B" flags="print" name="63ccb91c-f3bb-2209-5665-10d2541f3f43" title="Guest" subject="矩形" date="D:20240321154625+08'00'" creationdate="D:20240321154623+08'00'"/><underline page="273" rect="70.866,316.594,541.141,352.167" color="#A6A1E6" flags="print" name="684bde93-b647-7a72-e64d-8c327cf3884e" title="Guest" subject="下划线" date="D:20240321203937+08'00'" creationdate="D:20240321203937+08'00'" coords="244.30490340000006,352.1673434,541.1405704000003,352.1673434,244.30490340000006,331.53760078125,541.1405704000003,331.53760078125,70.866,337.2233434,200.37980000000007,337.2233434,70.866,316.59360078124996,200.37980000000007,316.59360078124996"><contents>各个节点是在向下“递”的过程中建立的，而各条边（即引用）是在
向上“归”的过程中建立的。</contents></underline><underline page="275" rect="70.866,294.701,541.131,330.274" color="#A6A1E6" flags="print" name="96cdb41d-b4ce-4ef7-e93e-92a24ca11daa" title="Guest" subject="下划线" date="D:20240321210228+08'00'" creationdate="D:20240321210228+08'00'" coords="70.866,330.2743434,541.1306077999999,330.2743434,70.866,309.64460078125,541.1306077999999,309.64460078125,70.866,315.3303434,210.34240000000008,315.3303434,70.866,294.70060078125,210.34240000000008,294.70060078125"><contents>在归并排序和构建二叉树中，我们都是将原问题分解为两个规模为原问题一半的子问题。然而对于汉诺塔问
题，我们采用不同的分解策略。</contents></underline><underline page="282" rect="64.321,638.659,541.290,689.176" color="#A6A1E6" flags="print" name="feadc393-4138-b1a1-e5b1-ffdba7b99666" title="Guest" subject="下划线" date="D:20240325170105+08'00'" creationdate="D:20240325170105+08'00'" coords="64.321,689.1763434,541.2903500380866,689.1763434,64.321,668.54660078125,541.2903500380866,668.54660078125,70.866,674.2323434,541.1306077999998,674.2323434,70.866,653.60260078125,541.1306077999998,653.60260078125,70.866,659.2883434,160.52940000000004,659.2883434,70.866,638.65860078125,160.52940000000004,638.65860078125"><contents>「回溯算法 backtracking algorithm」是一种通过穷举来解决问题的方法，它的核心思想是从一个初始状态
出发，暴力搜索所有可能的解决方案，当遇到正确的解则将其记录，直到找到解或者尝试了所有可能的选择
都无法找到解为止。</contents></underline><underline page="290" rect="70.866,673.007,541.129,723.524" color="#A6A1E6" flags="print" name="d0d0e2e0-d3f7-bddb-e2ec-1d989ee98dd1" title="Guest" subject="下划线" date="D:20240325171343+08'00'" creationdate="D:20240325171343+08'00'" coords="120.868,723.5243434,541.1287185999997,723.5243434,120.868,702.89460078125,541.1287185999997,702.89460078125,70.86600000000004,708.5803434,541.1284291999998,708.5803434,70.86600000000004,687.95060078125,541.1284291999998,687.95060078125,70.86600000000004,693.6363434,220.30540000000013,693.6363434,70.86600000000004,673.00660078125,220.30540000000013,673.00660078125"><contents>回溯算法仍然是某些搜索问题和约束满足问题的最佳解决方案。对于这些问题，由于无法预测哪
些选择可生成有效的解，因此我们必须对所有可能的选择进行遍历。在这种情况下，关键是如何进行效率优
化，常见的效率优化方法有两种。</contents></underline><underline page="290" rect="70.866,311.448,548.812,566.199" color="#A6A1E6" flags="print" name="d09f17e4-e3b2-221b-ecb7-d9e46e8d7be6" title="Guest" subject="下划线" date="D:20240325171403+08'00'" creationdate="D:20240325171403+08'00'" coords="70.866,566.1993434,339.85680000000013,566.1993434,70.866,545.56960078125,339.85680000000013,545.56960078125,80.82900000000001,543.2853434,354.8006000000002,543.2853434,80.82900000000001,522.65560078125,354.8006000000002,522.65560078125,80.82900000000001,528.3413434,444.4640000000003,528.3413434,80.82900000000001,507.71160078125,444.4640000000003,507.71160078125,80.82900000000001,513.3973434,548.8122724,513.3973434,80.82900000000001,492.76760078125,548.8122724,492.76760078125,95.773,498.4533434,344.8380000000002,498.4533434,95.773,477.82360078125,344.8380000000002,477.82360078125,70.866,475.5393434,349.8192000000002,475.5393434,70.866,454.90960078125,349.8192000000002,454.90960078125,80.82900000000001,476.899716,380.80380000000014,476.899716,80.82900000000001,431.65636537231444,380.80380000000014,431.65636537231444,80.82900000000001,461.955716,525.4956000000001,461.955716,80.82900000000001,416.7123653723144,525.4956000000001,416.7123653723144,80.82900000000001,422.73734340000004,504.23960000000034,422.73734340000004,80.82900000000001,402.10760078125,504.23960000000034,402.10760078125,70.866,399.82334340000006,429.52000000000027,399.82334340000006,70.866,379.19360078125004,429.52000000000027,379.19360078125004,80.82900000000001,376.9093434,541.1311078000002,376.9093434,80.82900000000001,356.27960078125,541.1311078000002,356.27960078125,95.773,361.9653434,205.36160000000007,361.9653434,95.773,341.33560078125,205.36160000000007,341.33560078125,80.82900000000001,347.02134340000003,514.2022000000004,347.02134340000003,80.82900000000001,326.39160078125,514.2022000000004,326.39160078125,80.82900000000001,332.0773434,524.1648000000004,332.0773434,80.82900000000001,311.44760078125,524.1648000000004,311.44760078125"><contents>搜索问题：这类问题的目标是找到满足特定条件的解决方案。
‧ 全排列问题：给定一个集合，求出其所有可能的排列组合。
‧ 子集和问题：给定一个集合和一个目标和，找到集合中所有和为目标和的子集。
‧ 汉诺塔问题：给定三个柱子和一系列大小不同的圆盘，要求将所有圆盘从一个柱子移动到另一个柱子，
每次只能移动一个圆盘，且不能将大圆盘放在小圆盘上。
约束满足问题：这类问题的目标是找到满足所有约束条件的解。
‧ 𝑛 皇后：在 𝑛 × 𝑛 的棋盘上放置 𝑛 个皇后，使得它们互不攻击。
‧ 数独：在 9 × 9 的网格中填入数字 1 ~ 9 ，使得每行、每列和每个 3 × 3 子网格中的数字不重复。
‧ 图着色问题：给定一个无向图，用最少的颜色给图的每个顶点着色，使得相邻顶点颜色不同。
组合优化问题：这类问题的目标是在一个组合空间中找到满足某些条件的最优解。
‧ 0‑1 背包问题：给定一组物品和一个背包，每个物品有一定的价值和重量，要求在背包容量限制内，选
择物品使得总价值最大。
‧ 旅行商问题：在一个图中，从一个点出发，访问所有其他点恰好一次后返回起点，求最短路径。
‧ 最大团问题：给定一个无向图，找到最大的完全子图，即子图中的任意两个顶点之间都有边相连。</contents></underline><underline page="291" rect="110.716,72.260,385.712,92.889" color="#A6A1E6" flags="print" name="8341057e-33f1-092c-2a5a-9e23ff4ac713" title="Guest" subject="下划线" date="D:20240325171619+08'00'" creationdate="D:20240325171619+08'00'" coords="110.71640000000001,92.88934339999992,385.7118000000001,92.88934339999992,110.71640000000001,72.25960078125001,385.7118000000001,72.25960078125001"><contents>每个元素只被选择一次，我们考虑引入一个布尔型数组selected</contents></underline><underline page="292" rect="155.259,364.116,383.028,409.383" color="#A6A1E6" flags="print" name="6e4a1080-3873-8444-aa50-4db6c3b6f3bf" title="Guest" subject="下划线" date="D:20240325171703+08'00'" creationdate="D:20240325171703+08'00'" coords="155.2591846,409.382716,383.0279053,409.382716,155.2591846,364.115725,383.0279053,364.115725"><contents>该剪枝操作将搜索空间大小从 𝑂(𝑛𝑛) 降低至 𝑂(𝑛!)</contents></underline><underline page="291" rect="180.126,439.270,359.128,459.899" color="#A6A1E6" flags="print" name="68cd0a49-c37c-2384-a495-4daf69b70fe4" title="Guest" subject="下划线" date="D:20240325171738+08'00'" creationdate="D:20240325171738+08'00'" coords="180.1258342,459.89934339999996,359.1276000000001,459.89934339999996,180.1258342,439.26960078124995,359.1276000000001,439.26960078124995"><contents>选集合 choices 是输入数组中的所有元素</contents></underline><underline page="291" rect="322.950,404.114,479.561,424.743" color="#A6A1E6" flags="print" name="ed7e8b73-a011-c074-d0d9-2d5540e538e7" title="Guest" subject="下划线" date="D:20240325171753+08'00'" creationdate="D:20240325171753+08'00'" coords="322.9496678000002,424.7433434,479.5612500000001,424.7433434,322.9496678000002,404.11360078125,479.5612500000001,404.11360078125"><contents>树中的每个节点代表当前状态 state</contents></underline><underline page="291" rect="368.761,439.270,547.878,459.899" color="#A6A1E6" flags="print" name="567ea3f0-3895-9f9f-be07-d0db16d27d9b" title="Guest" subject="下划线" date="D:20240325171813+08'00'" creationdate="D:20240325171813+08'00'" coords="368.7614342000001,459.89934339999996,547.8778000000001,459.89934339999996,368.7614342000001,439.26960078124995,547.8778000000001,439.26960078124995"><contents>状态 state 是直至目前已被选择的元素。</contents></underline><underline page="313" rect="70.866,135.985,401.076,156.723" color="#A6A1E6" flags="print" name="5804d4f3-e9db-856c-70d2-57d51308948a" title="Guest" subject="下划线" date="D:20240326175459+08'00'" creationdate="D:20240326175459+08'00'" coords="70.86600000000001,156.72334339999998,401.0763770000001,156.72334339999998,70.86600000000001,135.98463484374997,401.0763770000001,135.98463484374997"><contents>由于动态规划不包含回溯过程，因此只需使用循环迭代实现，无须使用递归</contents></underline><underline page="315" rect="70.866,285.828,541.131,321.510" color="#A6A1E6" flags="print" name="a48b5959-06c3-b3ae-237d-de2b6862a12a" title="Guest" subject="下划线" date="D:20240326175628+08'00'" creationdate="D:20240326175628+08'00'" coords="421.0613526000001,321.5103434,541.1306077999999,321.5103434,421.0613526000001,300.77163484375,541.1306077999999,300.77163484375,70.866,306.5663434,300.00580000000014,306.5663434,70.866,285.82763484375,300.00580000000014,285.82763484375"><contents>子问题分解是一种通用的算
法思路，在分治、动态规划、回溯中的侧重点不同。</contents></underline><underline page="315" rect="95.773,218.082,541.141,253.764" color="#A6A1E6" flags="print" name="8dd8d6e0-bbbb-8af7-0d0d-d39eef850b12" title="Guest" subject="下划线" date="D:20240326175701+08'00'" creationdate="D:20240326175701+08'00'" coords="372.76316780000025,253.76434340000003,541.1410704000003,253.76434340000003,372.76316780000025,233.02563484375003,541.1410704000003,233.02563484375003,95.773,238.82034339999996,255.1746000000001,238.82034339999996,95.773,218.08163484374995,255.1746000000001,218.08163484374995"><contents>动态规划中的子问题是相互依赖的，在
分解过程中会出现许多重叠子问题。</contents></underline><underline page="315" rect="70.866,150.336,541.141,186.018" color="#A6A1E6" flags="print" name="25c82d9d-0d8c-8d1a-0c60-860d807c9d9b" title="Guest" subject="下划线" date="D:20240326175711+08'00'" creationdate="D:20240326175711+08'00'" coords="109.0426832,186.01834340000005,541.1405704000003,186.01834340000005,109.0426832,165.27963484375005,541.1405704000003,165.27963484375005,70.866,171.0743434000001,110.71640000000001,171.0743434000001,70.866,150.33563484375009,110.71640000000001,150.33563484375009"><contents>动态规划常用来求解最优化问题，它们不仅包含重叠子问题，还具有另外两大特性：最优子结构、无
后效性。</contents></underline><underline page="316" rect="83.315,311.459,443.712,356.726" color="#A6A1E6" flags="print" name="eae44f99-b533-9bf9-508d-95dfb60cbc0b" title="Guest" subject="下划线" date="D:20240326175831+08'00'" creationdate="D:20240326175831+08'00'" coords="83.31500000000001,356.72571600000003,443.71180000000004,356.72571600000003,83.31500000000001,311.458725,443.71180000000004,311.458725"><contents>𝑑𝑝[𝑖] 为爬到第 𝑖 阶累计付出的代价，由于第 𝑖 阶只可能从 𝑖 − 1 阶或 𝑖 − 2 阶走来</contents></underline><underline page="318" rect="380.044,387.213,491.120,432.480" color="#A6A1E6" flags="print" name="2694e399-7d76-1384-4598-6636c9b346cc" title="Guest" subject="下划线" date="D:20240326180216+08'00'" creationdate="D:20240326180216+08'00'" coords="380.0436,432.479716,491.11960000000005,432.479716,380.0436,387.212725,491.11960000000005,387.212725"><contents>，但不能连续两轮跳1 阶</contents></underline><underline page="319" rect="70.866,603.976,426.866,682.046" color="#A6A1E6" flags="print" name="e4265f6c-c6b4-13fa-fcf7-820642347daf" title="Guest" subject="下划线" date="D:20240326180237+08'00'" creationdate="D:20240326180237+08'00'" coords="159.71580000000012,682.045716,218.13920000000013,682.045716,159.71580000000012,624.8976250000001,218.13920000000013,624.8976250000001,70.86600000000011,661.1237160000001,426.8656000000001,661.1237160000001,70.86600000000011,603.975625,426.8656000000001,603.975625"><contents>入 𝑑𝑝[𝑖] 中。
为此，我们需要扩展状态定义：状态[𝑖, 𝑗] 表示处在第 𝑖 阶、并且上一轮跳了 𝑗 阶</contents></underline><underline page="320" rect="70.866,107.410,541.131,143.092" color="#A6A1E6" flags="print" name="d7b3887d-ca46-113e-0473-3a0dc3591356" title="Guest" subject="下划线" date="D:20240326180416+08'00'" creationdate="D:20240326180416+08'00'" coords="120.86828940000001,143.0923434,541.1306077999998,143.0923434,120.86828940000001,122.35363484375,541.1306077999998,122.35363484375,70.866,128.14834340000004,320.93722260000015,128.14834340000004,70.866,107.40963484375004,320.93722260000015,107.40963484375004"><contents>如果一个问题包含重叠子问题、最优子结构，并满足无后效性，那么它通常就适合用动态规划求
解。然而，我们很难从问题描述上直接提取出这些特性。</contents></underline><square page="309" rect="143.350,303.960,469.440,493.270" color="#007A3B" flags="print" name="e803a930-b68a-8f30-330b-3bdde9c03333" title="Guest" subject="矩形" date="D:20240326210622+08'00'" creationdate="D:20240326210618+08'00'"/><square page="310" rect="63.470,144.740,570.120,378.360" color="#007A3B" flags="print" name="52c94a6a-cbec-72c0-228d-58186892254d" title="Guest" subject="矩形" date="D:20240326211001+08'00'" creationdate="D:20240326210959+08'00'"/><square page="311" rect="118.730,503.110,492.970,717.590" color="#007A3B" flags="print" name="1e73f527-aab2-88d8-5d65-d1c089f681bf" title="Guest" subject="矩形" date="D:20240326211008+08'00'" creationdate="D:20240326211007+08'00'"/><square page="312" rect="121.460,517.340,492.420,714.310" color="#007A3B" flags="print" name="05739e4c-3a7b-ee44-d8c6-a4f85bdbc441" title="Guest" subject="矩形" date="D:20240326211155+08'00'" creationdate="D:20240326211151+08'00'"/><square page="314" rect="126.390,278.240,496.250,464.270" color="#007A3B" flags="print" name="25d9bd04-cec8-87d3-9b3a-1ed8973282ab" title="Guest" subject="矩形" date="D:20240326211600+08'00'" creationdate="D:20240326211559+08'00'"/><freetext page="319" rect="426.140,504.766,556.166,519.600" flags="print" name="03c1c797-e562-0e34-4501-5fd1e09d0eb3" title="Guest" subject="自由文本" date="D:20240326212636+08'00'" width="0" creationdate="D:20240326212619+08'00'" TextColor="#E44234" FontSize="12"><trn-custom-data bytes="{&quot;trn-auto-size-type&quot;:&quot;auto&quot;,&quot;trn-wrapped-text-lines&quot;:&quot;[\&quot;方程组表示最优子结构 \&quot;]&quot;}"/><contents>方程组表示最优子结构</contents><contents-richtext><body><p><span>方程组表示最优子结构</span></p></body></contents-richtext><defaultappearance>0 0 0 rg /Helvetica 12 Tf</defaultappearance><defaultstyle>font: Helvetica 12pt; text-align: left; color: #E44234</defaultstyle><apref-replace/></freetext><underline page="355" rect="221.361,668.438,333.929,689.176" color="#A6A1E6" flags="print" name="6b410894-67b9-da5f-609e-c39f5a16b85f" title="Guest" subject="下划线" date="D:20240327082908+08'00'" creationdate="D:20240327082908+08'00'" coords="221.36146380000005,689.1763434,333.92888120000015,689.1763434,221.36146380000005,668.43763484375,333.92888120000015,668.43763484375"><contents>一种常见的解决优化问题</contents></underline><underline page="355" rect="70.866,653.494,548.812,689.176" color="#A6A1E6" flags="print" name="3ecb833a-5c74-91cc-f1de-622f4d021826" title="Guest" subject="下划线" date="D:20240327082923+08'00'" creationdate="D:20240327082923+08'00'" coords="385.2362712000002,689.1763434,548.8122006000003,689.1763434,385.2362712000002,668.43763484375,548.8122006000003,668.43763484375,70.866,674.2323434,461.05122900000003,674.2323434,70.866,653.49363484375,461.05122900000003,653.49363484375"><contents>基本思想是在问题的每个决策阶段，
都选择当前看起来最优的选择，即贪心地做出局部最优的决策，以期望获得全局最优解。</contents></underline><underline page="355" rect="95.773,579.771,324.913,600.509" color="#A6A1E6" flags="print" name="b87be45b-25aa-297e-18a3-0ddec35b7d80" title="Guest" subject="下划线" date="D:20240327082949+08'00'" creationdate="D:20240327082949+08'00'" coords="95.773,600.5093434,324.9128000000002,600.5093434,95.773,579.77063484375,324.9128000000002,579.77063484375"><contents>动态规划会根据之前阶段的所有决策来考虑当前决策</contents></underline><underline page="357" rect="70.866,424.417,541.131,460.099" color="#A6A1E6" flags="print" name="842faaec-6edd-1aae-65c6-7636f8761cce" title="Guest" subject="下划线" date="D:20240327093756+08'00'" creationdate="D:20240327093756+08'00'" coords="120.8682894,460.0993434,541.1306077999998,460.0993434,120.8682894,439.36063484375,541.1306077999998,439.36063484375,70.86599999999999,445.1553434,150.5668,445.1553434,70.86599999999999,424.41663484375,150.5668,424.41663484375"><contents>对于零钱兑换问题，贪心算法无法保证找到全局最优解，并且有可能找到非常差的解。它更适合
用动态规划解决。</contents></underline><underline page="357" rect="82.174,350.694,544.091,401.319" color="#A6A1E6" flags="print" name="ba8c478b-ed6f-7fe3-2212-6485d60470a2" title="Guest" subject="下划线" date="D:20240327093803+08'00'" creationdate="D:20240327093803+08'00'" coords="82.174,401.31934340000004,544.0906000000002,401.31934340000004,82.174,380.58063484375003,544.0906000000002,380.58063484375003,82.174,386.3763434,541.1416704000003,386.3763434,82.174,365.63763484375,541.1416704000003,365.63763484375,95.773,371.4323434,344.8380000000002,371.4323434,95.773,350.69363484375,344.8380000000002,350.69363484375"><contents>1. 可以保证找到最优解：贪心算法在这种情况下往往是最优选择，因为它往往比回溯、动态规划更高效。
2. 可以找到近似最优解：贪心算法在这种情况下也是可用的。对于很多复杂问题来说，寻找全局最优解是
非常困难的，能以较高效率找到次优解也是非常不错的。</contents></underline><underline page="358" rect="70.866,475.057,548.805,593.015" color="#A6A1E6" flags="print" name="2655657d-db30-1e87-fbfb-4f37905d817d" title="Guest" subject="下划线" date="D:20240327094356+08'00'" creationdate="D:20240327094356+08'00'" coords="70.866,593.0153434,260.1554000000001,593.0153434,70.866,572.27663484375,260.1554000000001,572.27663484375,82.174,570.5153434,541.1406704000003,570.5153434,82.174,549.77663484375,541.1406704000003,549.77663484375,95.773,555.5713434,145.586,555.5713434,95.773,534.83263484375,145.586,534.83263484375,82.174,540.6273434,541.1414704000003,540.6273434,82.174,519.88863484375,541.1414704000003,519.88863484375,95.773,525.6833434,165.51120000000003,525.6833434,95.773,504.94463484375,165.51120000000003,504.94463484375,82.174,510.73934340000005,548.8050302,510.73934340000005,82.174,490.00063484375005,548.8050302,490.00063484375005,95.773,495.79534340000004,205.36160000000007,495.79534340000004,95.773,475.05663484375003,205.36160000000007,475.05663484375003"><contents>贪心问题的解决流程大体可分为以下三步。
1. 问题分析：梳理与理解问题特性，包括状态定义、优化目标和约束条件等。这一步在回溯和动态规划中
都有涉及。
2. 确定贪心策略：确定如何在每一步中做出贪心选择。这个策略能够在每一步减小问题的规模，并最终能
解决整个问题。
3. 正确性证明：通常需要证明问题具有贪心选择性质和最优子结构。这个步骤可能需要使用到数学证明，
例如归纳法或反证法等。</contents></underline><underline page="358" rect="112.591,258.901,180.491,280.697" color="#A6A1E6" flags="print" name="c051f5a9-45d0-cc67-f26e-51726f529971" title="Guest" subject="下划线" date="D:20240327094426+08'00'" creationdate="D:20240327094426+08'00'" coords="112.5906729,280.69696020000004,180.4908729,280.69696020000004,112.5906729,258.9009960000001,180.4908729,258.9009960000001"><contents>贪心典型例题</contents></underline><underline page="277" rect="113.287,319.075,347.148,364.319" color="#A6A1E6" flags="print" name="d51523d3-dbd2-9db3-bf2f-5517dc02a42f" title="Guest" subject="下划线" date="D:20240327114421+08'00'" creationdate="D:20240327114421+08'00'" coords="113.287,364.31871600000005,347.1476000000002,364.31871600000005,113.287,319.0753653723145,347.1476000000002,319.0753653723145"><contents>𝑓(3) ，即当有三个圆盘时，情况变得稍微复杂了一些</contents></underline><underline page="278" rect="120.723,526.907,369.024,572.151" color="#A6A1E6" flags="print" name="1fa8e8ac-df83-d882-335a-cf5457aa8cee" title="Guest" subject="下划线" date="D:20240327150522+08'00'" creationdate="D:20240327150522+08'00'" coords="120.72300000000001,572.150716,369.02408379999997,572.150716,120.72300000000001,526.9073653723144,369.02408379999997,526.9073653723144"><contents>我们将问题 𝑓(3) 划分为两个子问题 𝑓(2) 和子问题 𝑓(1)</contents></underline><freetext page="291" rect="120.590,334.010,172.430,376.430" flags="print" name="c60acadd-3f4a-1847-5306-99a4ad0c4f2e" title="Guest" subject="自由文本" date="D:20240327151512+08'00'" width="0" creationdate="D:20240327151510+08'00'" TextColor="#E44234" FontSize="12"><trn-custom-data bytes="{&quot;trn-wrapped-text-lines&quot;:&quot;[\&quot;在这里插\&quot;,\&quot;入文字 \&quot;]&quot;}"/><contents/><contents-richtext><body><p><span/></p></body></contents-richtext><defaultappearance>0 0 0 rg /Helvetica 12 Tf</defaultappearance><defaultstyle>font: Helvetica 12pt; text-align: left; color: #E44234</defaultstyle><apref-replace xmlns="http://www.w3.org/1999/xhtml"></apref-replace></freetext><square page="291" rect="121.370,189.850,492.560,376.430" color="#007A3B" flags="print" name="e01b9a69-2a70-5e7f-0230-a9edf9f4fde0" title="Guest" subject="矩形" date="D:20240327151516+08'00'" creationdate="D:20240327151514+08'00'"/><square page="292" rect="123.730,442.020,487.450,637.630" color="#007A3B" flags="print" name="2d9722dd-8480-2d41-c72e-021b4f6dfbfb" title="Guest" subject="矩形" date="D:20240327151658+08'00'" creationdate="D:20240327151656+08'00'"/></annots><pages><defmtx matrix="1,0,0,-1,0,792"/></pages></xfdf>