/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HtmlToMdPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var HtmlToMdPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "html-to-markdown",
      name: "Convert HTML images to Markdown",
      editorCallback: (editor) => {
        const content = editor.getValue();
        const convertedContent = this.convertHtmlToMd(content);
        editor.setValue(convertedContent);
      }
    });
    this.addCommand({
      id: "encode-image-spaces",
      name: "Convert spaces in all links to %20",
      editorCallback: (editor) => {
        const content = editor.getValue();
        const convertedContent = this.encodeAllLinks(content);
        editor.setValue(convertedContent);
      }
    });
    this.addCommand({
      id: "convert-encode-html",
      name: "Convert HTML and encode all links",
      editorCallback: (editor) => {
        const content = editor.getValue();
        const htmlConverted = this.convertHtmlToMd(content);
        const finalContent = this.encodeAllLinks(htmlConverted);
        editor.setValue(finalContent);
      }
    });
  }
  convertHtmlToMd(content) {
    const imgRegex = /<img[^>]+src="([^"]+)"[^>]*alt="([^"]+)"[^>]*>/g;
    return content.replace(imgRegex, (match, src, alt) => {
      const decodedSrc = decodeURIComponent(src);
      const encodedSrc = decodedSrc.replace(/\s/g, "%20");
      return `![${alt}](${encodedSrc})`;
    });
  }
  encodeImageSpaces(content) {
    const mdImageRegex = /!\[([^\]]*)\]\(([^)]+)\)/g;
    return content.replace(mdImageRegex, (match, alt, path) => {
      const encodedPath = this.processPath(path);
      return `![${alt}](${encodedPath})`;
    });
  }
  encodeMdLinks(content) {
    const mdLinkRegex = /(?<!!)\[([^\]]*)\]\(([^)]+)\)/g;
    return content.replace(mdLinkRegex, (match, text, path) => {
      const encodedPath = this.processPath(path);
      return `[${text}](${encodedPath})`;
    });
  }
  encodeAllLinks(content) {
    const withImages = this.encodeImageSpaces(content);
    return this.encodeMdLinks(withImages);
  }
  processPath(path) {
    var _a;
    let processedPath = path.replace(/^\.\//, "");
    processedPath = processedPath.replace(/\s/g, "%20");
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      const currentDir = ((_a = activeFile.parent) == null ? void 0 : _a.path) || "";
      const expectedPath = `${currentDir}/${processedPath}`;
      const normalizedPath = this.normalizePath(expectedPath);
      const existingFile = this.app.vault.getAbstractFileByPath(normalizedPath);
      if (!existingFile) {
        const files = this.app.vault.getAllLoadedFiles();
        const matchingFile = files.find(
          (file) => file instanceof import_obsidian.TFile && file.path.endsWith(processedPath)
        );
        if (matchingFile) {
          processedPath = matchingFile.path;
        }
      }
    }
    return processedPath;
  }
  normalizePath(path) {
    return path.replace(/\/+/g, "/").replace(/\/{2,}/g, "/");
  }
  onunload() {
  }
};
